{"version":3,"sources":["pages/Main.jsx","App.js","serviceWorker.js","reduce/MainReducer.js","action/MainAction.js","configureStore.js","index.js"],"names":["Study","lazy","MainContent","style","padding","exact","path","component","to","Main","fallback","size","React","Component","temp","connect","state","ownProps","dispatch","App","Boolean","window","location","hostname","match","MainReducer","isFetching","collapsed","action","type","Object","assign","data","error","rootReducer","createBrowserHistory","combineReducers","main","loggerMiddleware","createLogger","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAKMA,EAAQC,gBAAK,kBAAM,uDAGnBC,EAAc,WAChB,OACI,yBAAKC,MAAO,CAAEC,QAAS,QACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWP,IACtC,kBAAC,IAAD,CAAUQ,GAAG,cAQvBC,E,iLAIE,OACI,6BACI,kBAAC,WAAD,CAAUC,SAAU,uBAAMC,KAAK,WAC3B,kBAAC,EAAD,Y,GAPDC,IAAMC,WAkCVC,EALFC,aAbW,SAACC,EAAOC,GAK5B,MAAQ,MAIe,SAAAC,GAAQ,MAAK,KAI3BH,CAGXN,GC/BaU,E,iLAXX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQb,KAAK,IAAIC,UAAWE,IAC5B,kBAAC,IAAD,CAAUD,GAAG,Y,GANLI,IAAMC,WCGJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCKSC,G,MApBK,WAA4D,IAA3DT,EAA0D,uDAAlD,CAAEU,YAAY,EAAMC,WAAU,GAASC,EAAW,uCAC3E,OAAQA,EAAOC,MACX,ICFqB,qBDGjB,OAAOC,OAAOC,OAAO,GAAIf,EAAO,CAC5BU,YAAY,IAEpB,ICIqB,qBDHjB,OAAOI,OAAOC,OAAO,GAAIf,EAAO,CAC5BU,YAAY,EACZM,KAAMJ,EAAOI,KACbC,MAAOL,EAAOK,QAEtB,ICkCoB,gBDjChB,OAAOH,OAAOC,OAAO,GAAIf,EAAO,CAC5BW,WAAYX,EAAMW,YAE1B,QACI,OAAOX,KEZbkB,GAFiBC,cAEHC,YAAgB,CAEhCC,KAAMZ,KAEJa,EAAmBC,yBCFzB,IDIuCC,ECJjCC,EDKKC,YACHR,EACAM,EACAG,YAAgBC,IAAiBN,ICNzCO,IAASC,OAAQ,kBAAC,IAAD,CAAUL,MAAOA,GAC1B,kBAAC,EAAD,OACKM,SAASC,eAAe,SJmH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d5d896f0.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\r\nimport { Redirect, Switch, Route, Link, withRouter } from 'react-router-dom';\r\nimport { Layout, Spin } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Study = lazy(() => import('./Study'));\r\n\r\n\r\nconst MainContent = () => {\r\n    return (\r\n        <div style={{ padding: '2px' }}>\r\n            <Switch>\r\n                <Route exact path=\"/Study\" component={Study} />\r\n                <Redirect to=\"/Study\" />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nclass Main extends React.Component {\r\n\r\n    render() {\r\n        debugger;\r\n        return (\r\n            <div>\r\n                <Suspense fallback={<Spin size=\"small\" />}>\r\n                    <MainContent />\r\n                </Suspense>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    // debugger;\r\n    // const { data, error } = state.main;\r\n    // return { data, error };\r\n\r\n    return  {};\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n})\r\n\r\nconst temp = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Main);\r\n\r\nexport default temp;","import React from 'react';\nimport { Route, Switch, BrowserRouter,Redirect } from 'react-router-dom';\nimport Main from \"./pages/Main\";\n\n// import moment from 'moment';\n// import 'moment/locale/zh-cn';\n\n// moment.locale('zh-cn');\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route  path=\"/\" component={Main} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </BrowserRouter>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { REQUEST_POSTS, RECEIVE_POSTS, Side_Collapse } from \"../action/MainAction\";\r\n\r\n\r\nconst MainReducer = (state = { isFetching: false,collapsed:false }, action) => {\r\n    switch (action.type) {\r\n        case REQUEST_POSTS:\r\n            return Object.assign({}, state, {\r\n                isFetching: true\r\n            });\r\n        case RECEIVE_POSTS:\r\n            return Object.assign({}, state, {\r\n                isFetching: false,\r\n                data: action.data,\r\n                error: action.error\r\n            })\r\n        case Side_Collapse:\r\n            return Object.assign({}, state, {\r\n                collapsed: !state.collapsed\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default MainReducer;","import fetch from 'cross-fetch';\r\nimport { baseUrl } from \"./constant\";\r\n\r\nexport const REQUEST_POSTS = 'Menu/REQUEST_POSTS';\r\n\r\n// 发起请求\r\nconst requestPosts = () => {\r\n    return {\r\n        type: REQUEST_POSTS,\r\n    }\r\n\r\n};\r\n\r\nexport const RECEIVE_POSTS = 'Menu/RECEIVE_POSTS'\r\n\r\n//通知 reducer 请求成功的 action\r\nconst receviePostOnSuccess = (data) => {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        data: data\r\n    }\r\n}\r\n//通知 reducer 请求失败的 action。\r\nconst receviePostOnError = (message) => {\r\n    return {\r\n        type: RECEIVE_POSTS,\r\n        error: message\r\n    }\r\n}\r\n\r\nexport const getMenus = (username) => {\r\n    debugger;\r\n    return (dispatch) => {\r\n        let url =baseUrl +\"/menu/getMenus/\";\r\n        dispatch(requestPosts());\r\n        fetch(url, {\r\n            method: \"Get\",\r\n            mode: \"cors\"\r\n        }).then(rs => rs.json(), error => {\r\n            debugger;\r\n            dispatch(receviePostOnError(error.message));\r\n        }).then(rs => {\r\n            debugger;\r\n            dispatch(receviePostOnSuccess(rs));\r\n            console.log(rs);\r\n        })\r\n    }\r\n}\r\n\r\nexport const Side_Collapse =\"SIDE/Collapse\";\r\n\r\nexport const SideCollapse = () => {\r\n    return {\r\n        type: Side_Collapse\r\n    }\r\n}\r\n","import { createStore, applyMiddleware,combineReducers } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport { createBrowserHistory } from 'history';\r\nimport MainReducer from \"./reduce/MainReducer\";\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nconst rootReducer = combineReducers({\r\n    // router: connectRouter(history),\r\n    main: MainReducer\r\n})\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default function configureStore(preloadedState) {\r\n    return createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './pages/index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {  createBrowserHistory} from 'history';\n\nimport { Provider } from 'react-redux';\nimport configureStore from \"./configureStore\";\nconst store = configureStore()\n\nReactDOM.render( <Provider store={store}>\n        <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}